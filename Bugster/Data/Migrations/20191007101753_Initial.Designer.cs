// <auto-generated />
using System;
using Bugster.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bugster.Data.Migrations
{
    [DbContext(typeof(BugsterDbContext))]
    [Migration("20191007101753_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bugster.Domain.Bug", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AssigneeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Bugs");
                });

            modelBuilder.Entity("Bugster.Domain.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<long>("ManagerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.HasIndex("ManagerId")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Bugster.Domain.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bound")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Bound = "FRONTEND",
                            Name = "JQuery"
                        },
                        new
                        {
                            Id = 2L,
                            Bound = "FRONTEND",
                            Name = "React"
                        },
                        new
                        {
                            Id = 3L,
                            Bound = "FRONTEND",
                            Name = "Angular"
                        },
                        new
                        {
                            Id = 4L,
                            Bound = "FRONTEND",
                            Name = "Vue.js"
                        },
                        new
                        {
                            Id = 5L,
                            Bound = "FRONTEND",
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = 6L,
                            Bound = "FRONTEND",
                            Name = "HTML"
                        },
                        new
                        {
                            Id = 7L,
                            Bound = "FRONTEND",
                            Name = "CSS"
                        },
                        new
                        {
                            Id = 8L,
                            Bound = "FRONTEND",
                            Name = "GraphQL"
                        },
                        new
                        {
                            Id = 9L,
                            Bound = "FRONTEND",
                            Name = "Bootstrap"
                        },
                        new
                        {
                            Id = 10L,
                            Bound = "FRONTEND",
                            Name = "React Native"
                        },
                        new
                        {
                            Id = 11L,
                            Bound = "BACKEND",
                            Name = "Php"
                        },
                        new
                        {
                            Id = 12L,
                            Bound = "BACKEND",
                            Name = "Java"
                        },
                        new
                        {
                            Id = 13L,
                            Bound = "BACKEND",
                            Name = ".NET Core"
                        },
                        new
                        {
                            Id = 14L,
                            Bound = "BACKEND",
                            Name = "Node.js"
                        },
                        new
                        {
                            Id = 15L,
                            Bound = "BACKEND",
                            Name = "MySQL"
                        },
                        new
                        {
                            Id = 16L,
                            Bound = "BACKEND",
                            Name = "PostgreSQL"
                        },
                        new
                        {
                            Id = 17L,
                            Bound = "BACKEND",
                            Name = "MS SQL"
                        },
                        new
                        {
                            Id = 18L,
                            Bound = "BACKEND",
                            Name = "Rabbit MQ"
                        },
                        new
                        {
                            Id = 19L,
                            Bound = "BACKEND",
                            Name = "OAuth"
                        },
                        new
                        {
                            Id = 20L,
                            Bound = "BACKEND",
                            Name = "Kafka"
                        },
                        new
                        {
                            Id = 21L,
                            Bound = "BACKEND",
                            Name = "Docker"
                        },
                        new
                        {
                            Id = 22L,
                            Bound = "BACKEND",
                            Name = "Mongo DB"
                        });
                });

            modelBuilder.Entity("Bugster.Domain.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Bugster.Domain.Bug", b =>
                {
                    b.HasOne("Bugster.Domain.User", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Bugster.Domain.Project", null)
                        .WithMany("Bugs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bugster.Domain.Project", b =>
                {
                    b.HasOne("Bugster.Domain.User", "Manager")
                        .WithOne()
                        .HasForeignKey("Bugster.Domain.Project", "ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bugster.Domain.User", b =>
                {
                    b.HasOne("Bugster.Domain.Project", null)
                        .WithMany("TeamMembers")
                        .HasForeignKey("ProjectId");
                });
#pragma warning restore 612, 618
        }
    }
}
